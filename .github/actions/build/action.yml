
# libplateau を github actions でビルドする共通アクションです。

inputs:
  shell_type:
    description: "利用するシェルを引数で渡します。"
    required: true
  visual_studio_version:
    description: "ビルドで利用する Visual Studio のバージョンです。Windowsでのみ利用します。"
    required: true
  arch:
    description: "ビルド対象のCPUアーキテクチャです。MacOSでのみ利用します。"
    required: false
    default: "x86_64"

runs:
  using: Composite

  steps:

    - name: Update Submodules
      run: git submodule update --init --recursive
      shell: ${{ inputs.shell_type }}

    - name: Clone fbx_sdk
      env:
        GIT_CLONE_PROTECTION_ACTIVE: false
      run: |
        cd ./3rdparty
        git clone git@github.com:Synesthesias/fbx_sdk.git
        cd ..
      shell: ${{ inputs.shell_type }}

    - name: Install ninja-build tool
      uses: seanmiddleditch/gha-setup-ninja@v3

      # Ubuntuでビルドを通すには OpenGL API のインストールが必要です。
    - name: Install OpenGL API on Ubuntu machine
      if: runner.os == 'Linux'
      run: sudo apt-get install libgl1-mesa-dev libglu1-mesa-dev
      shell: ${{ inputs.shell_type }}


    # ここのバージョンは、対応したいUnreal Engineのバージョンがリリースされた時点で最新だったMSVCのバージョンと合わせる必要があります。でないとUnreal Engineでリンク時にエラーになる可能性があります。
#    - name: Install Visual Studio Build Tools
#      if: runner.os == 'Windows'
#      run: |
#        choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.14.36.17.6.x86.x64 Microsoft.VisualStudio.Component.VC.14.36.17.6.CLI.Support"
#      shell: ${{ inputs.shell_type }}

    # ここのバージョンもUnreal Engineと合わせる必要があります。
    - name: Setup MSVC Build Tools
      if: runner.os == 'Windows'
      run: |
        # Visual Studio install path
        $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -property installationPath
        if ($vsPath) {
          # add Visual Studio Installer component
          & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe" modify --installPath "$vsPath" --add Microsoft.VisualStudio.Component.VC.14.36.17.6.x86.x64 --quiet --norestart --wait
          $vcvarsallPath = Join-Path $vsPath "VC\Auxiliary\Build\vcvarsall.bat"
          # find toolset version
          $msvcPath = Join-Path $vsPath "VC\Tools\MSVC"
          $toolsetVersion = Get-ChildItem $msvcPath | Where-Object { $_.Name.StartsWith("14.36") } | Sort-Object Name -Descending | Select-Object -First 1 -ExpandProperty Name
          $toolsetPath = Join-Path $msvcPath $toolsetVersion
          $clPath = Join-Path $toolsetPath "bin\Hostx64\x64\cl.exe"
          if (Test-Path $vcvarsallPath) {
            # vcvarsall.bat
            $vcvars = "& `"$vcvarsallPath`" x64 14.36"
            $vcvarsOutput = cmd /c "$vcvars & set"
            set environment vars to github Actions
            $vcvarsOutput | ForEach-Object {
              if ($_ -match "^(.*?)=(.*)$") {
                $name = $matches[1]
                $value = $matches[2]
                if ($name -eq "PATH") {
                  $value = "$toolsetPath\bin\Hostx64\x64;$value"
                }
                Write-Host "Setting $name"
                [System.Environment]::SetEnvironmentVariable($name, $value)
                echo "$name=$value" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
              }
            }
          if (Test-Path $clPath) {
            Write-Host "Compiler found at: $clPath"
            $env:CXX = $clPath
            echo "CXX=$clPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            $env:CMAKE_CXX_COMPILER = $clPath
            echo "CMAKE_CXX_COMPILER=$clPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            $clVersion = & $clPath 2>&1 | Select-String "Version"
            Write-Host "Compiler version: $clVersion"
          } else {
            Write-Host "[Error] Compiler not found at: $clPath"
            Write-Host "Searching for cl.exe in Visual Studio directory..."
            $foundClExe = Get-ChildItem -Path $vsPath -Recurse -Filter "cl.exe" | Where-Object { $_.FullName -like "*14.36*" } | Select-Object -First 1
            if ($foundClExe) {
            $clPath = $foundClExe.FullName
            Write-Host "Found compiler at: $clPath"
            $env:CXX = $clPath
            echo "CXX=$clPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            $env:CMAKE_CXX_COMPILER = $clPath
            echo "CMAKE_CXX_COMPILER=$clPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            Write-Host "[Error] Could not find cl.exe for version 14.36"
          }
          }
          Write-Host "Visual Studio 14.36 environment variables have been set."
          } else {
            Write-Host "[Error] vcvarsall.bat not found."
          }
        } else {
          Write-Host "[Error] Visual Studio Installer is not found."
        }
        Write-Host "PATH: $env:PATH"
        Write-Host "CXX: $env:CXX"
        Write-Host "CMAKE_CXX_COMPILER: $env:CMAKE_CXX_COMPILER"
        
          if (Test-Path $env:CMAKE_CXX_COMPILER) {
        Write-Host "Compiler exists at: $env:CMAKE_CXX_COMPILER"
        } else {
        Write-Host "[Error] Compiler does not exist at: $env:CMAKE_CXX_COMPILER"
        }
      shell: ${{ inputs.shell_type }}


    # Windowsのみコンパイラを用意します。
#    - name: Add msbuild to PATH
#      if: runner.os == 'Windows'
#      uses: ilammy/msvc-dev-cmd@v1
#      with:
#        toolset: 14.36

      # Linuxで使うコンパイラを明示
    - name: Setup Additional Cmake Options in Linux
      if: runner.os == 'Linux'
      run: |
        echo "ADDITIONAL_CMAKE_OPTIONS=-DCMAKE_CXX_COMPILER=\"/usr/bin/g++-9\"" >> $GITHUB_ENV
      shell: ${{ inputs.shell_type }}
      # Ubuntu 18 だとデフォルトでは g++-7 になりますが、std::filesystem を使う都合上 g++-9 を指定します。

      # Windowsで使うコンパイラを明示
    - name: Setup Additional Cmake Options in Windows
      if: runner.os == 'Windows'
      run: |
        echo "ADDITIONAL_CMAKE_OPTIONS=-DCMAKE_CXX_COMPILER=`"$env:CMAKE_CXX_COMPILER`"" >> $env:GITHUB_ENV
      shell: ${{ inputs.shell_type }}

    - name: Configure CMake for Unity
      run: >
        cmake
        -S ${{github.workspace}} 
        -B ${{github.workspace}}/out/build/x64-Release-Unity 
        -G "Ninja" 
        -D CMAKE_BUILD_TYPE:STRING="${{env.BUILD_TYPE}}" 
        -D CMAKE_CXX_FLAGS="-w"
        -D BUILD_LIB_TYPE=dynamic
        -D RUNTIME_LIB_TYPE=MT
        -D CMAKE_OSX_ARCHITECTURES:STRING="${{ inputs.arch }}"
        ${{ env.ADDITIONAL_CMAKE_OPTIONS }}
      shell: ${{ inputs.shell_type }}
    # 10万行超えの警告が出るので一時的な処置として警告を抑制しています。


    - name: Build by CMake for Unity
      run: cmake --build ${{github.workspace}}/out/build/x64-Release-Unity --config ${{env.BUILD_TYPE}}
      shell: ${{ inputs.shell_type }}

    - name: Configure CMake for Unreal for non-Windows
      if: runner.os != 'Windows'
      run: >
        cmake
        -S ${{github.workspace}}
        -B ${{github.workspace}}/out/build/x64-Release-Unreal
        -G "Ninja"
        -D CMAKE_BUILD_TYPE:STRING="${{env.BUILD_TYPE}}"
        -D CMAKE_CXX_FLAGS="-w"
        -D BUILD_LIB_TYPE=static
        -D RUNTIME_LIB_TYPE=MD
        -D CMAKE_OSX_ARCHITECTURES:STRING="${{ inputs.arch }}"
        ${{ env.ADDITIONAL_CMAKE_OPTIONS }}
      shell: ${{ inputs.shell_type }}

    # Unreal Engine側と Visual Studio のバージョンを合わせる必要があります。
    - name: Configure CMake for Unreal for Windows
      if: runner.os == 'Windows'
      run: >
        cmake
        -S ${{github.workspace}}
        -B ${{github.workspace}}/out/build/x64-Release-Unreal
        -G "Visual Studio ${{ inputs.visual_studio_version }}"
        -D CMAKE_INSTALL_PREFIX="C:/ninja"
        -D CMAKE_BUILD_TYPE:STRING="${{env.BUILD_TYPE}}"
        -D CMAKE_CXX_FLAGS="-w"
        -D BUILD_LIB_TYPE=static
        -D RUNTIME_LIB_TYPE=MD
        ${{ env.ADDITIONAL_CMAKE_OPTIONS }}
      shell: ${{ inputs.shell_type }}

    - name: Build by CMake for Unreal
      run: |
        cmake --build ${{github.workspace}}/out/build/x64-Release-Unreal --config ${{env.BUILD_TYPE}}
      shell: ${{ inputs.shell_type }}


    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 8.0.x


    # TODO Platform="Any CPU" としているのはあくまで仮です。
    # どの値に設定すべきか要検討です。
    - name: Build C# Wrapper
      run: dotnet build -p:Configuration=Release -p:Platform="Any CPU" ${{github.workspace}}/wrappers/csharp/LibPLATEAU.NET
      shell: ${{ inputs.shell_type }}
