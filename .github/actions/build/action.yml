
# libplateau を github actions でビルドする共通アクションです。

inputs:
  shell_type:
    description: "利用するシェルを引数で渡します。"
    required: true
  visual_studio_version:
    description: "ビルドで利用する Visual Studio のバージョンです。Windowsでのみ利用します。"
    required: true
  arch:
    description: "ビルド対象のCPUアーキテクチャです。MacOSでのみ利用します。"
    required: false
    default: "x86_64"

runs:
  using: Composite

  steps:


    - name: Clone fbx_sdk
      uses: actions/checkout@v4
      with:
        repository: Synesthesias/fbx_sdk
        path: 3rdparty/fbx_sdk
        fetch-depth: 1
        ssh-key: ${{ env.KEY_TO_ACCESS_FBXSDK }}
      env:
        GIT_CLONE_PROTECTION_ACTIVE: false


    - name: Install ninja-build tool
      uses: seanmiddleditch/gha-setup-ninja@v3

      # Ubuntuでビルドを通すには OpenGL API のインストールが必要です。
    - name: Install OpenGL API on Ubuntu machine
      if: runner.os == 'Linux'
      run: sudo apt-get install libgl1-mesa-dev libglu1-mesa-dev
      shell: ${{ inputs.shell_type }}



    # Unreal Engineと合わせたバージョンでMSVCを用意する準備として、始めからある望みでないバージョンを消します。
    # 参考: https://github.com/actions/runner-images/issues/9701
    - name: Delete components
      if: runner.os == 'Windows'
      run: |
        Set-Location "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
        $InstallPath = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
        $componentsToRemove= @(
         "Microsoft.VisualStudio.Component.VC.x86.x64"
        )
        [string]$workloadArgs = $componentsToRemove | ForEach-Object {" --remove " +  $_}
        $Arguments = ('/c', "vs_installer.exe", 'modify', '--installPath', "`"$InstallPath`"",$workloadArgs, '--quiet', '--norestart', '--nocache')
        # should be run twice
        $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
        $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
      shell: ${{ inputs.shell_type }}

    # Unreal Engineと合わせたバージョンでMSVCを用意します。
    - name: Install components
      if: runner.os == 'Windows'
      run: |
        Set-Location "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
        $InstallPath = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
        $componentsToInstall= @(
          "Microsoft.VisualStudio.Component.VC.14.36.17.6.x86.x64"
        )
        [string]$workloadArgs = $componentsToInstall | ForEach-Object {" --add " +  $_}
        $Arguments = ('/c', "vs_installer.exe", 'modify', '--installPath', "`"$InstallPath`"",$workloadArgs, '--quiet', '--norestart', '--nocache')
        # should be run twice
        $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
        $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
      shell: ${{ inputs.shell_type }}



#     Windowsのみコンパイラパスを通します。
    - name: Add msbuild to PATH
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    # Windowsで使うコンパイラを明示
    - name: Setup Additional Cmake Options in Windows
      if: runner.os == 'Windows'
      run: |
        echo "ADDITIONAL_CMAKE_OPTIONS=-DCMAKE_CXX_COMPILER=cl.exe" >> $env:GITHUB_ENV
      shell: ${{ inputs.shell_type }}

      # Linuxで使うコンパイラを明示
    - name: Setup Additional Cmake Options in Linux
      if: runner.os == 'Linux'
      run: |
        echo "ADDITIONAL_CMAKE_OPTIONS=-DCMAKE_CXX_COMPILER=\"/usr/bin/g++-9\"" >> $GITHUB_ENV
      shell: ${{ inputs.shell_type }}
      # Ubuntu 18 だとデフォルトでは g++-7 になりますが、std::filesystem を使う都合上 g++-9 を指定します。

    - name: Configure CMake for Unity
      run: >
        cmake
        -S ${{github.workspace}} 
        -B ${{github.workspace}}/out/build/x64-Release-Unity 
        -G "Ninja" 
        -D CMAKE_BUILD_TYPE:STRING="${{env.BUILD_TYPE}}" 
        -D CMAKE_CXX_FLAGS="-w"
        -D BUILD_LIB_TYPE=dynamic
        -D RUNTIME_LIB_TYPE=MT
        -D CMAKE_OSX_ARCHITECTURES:STRING="${{ inputs.arch }}"
        ${{ env.ADDITIONAL_CMAKE_OPTIONS }}
      shell: ${{ inputs.shell_type }}
    # 10万行超えの警告が出るので一時的な処置として警告を抑制しています。


    - name: Build by CMake for Unity
      run: cmake --build ${{github.workspace}}/out/build/x64-Release-Unity --config ${{env.BUILD_TYPE}}
      shell: ${{ inputs.shell_type }}

    - name: Configure CMake for Unreal for non-Windows
      if: runner.os != 'Windows'
      run: >
        cmake
        -S ${{github.workspace}}
        -B ${{github.workspace}}/out/build/x64-Release-Unreal
        -G "Ninja"
        -D CMAKE_BUILD_TYPE:STRING="${{env.BUILD_TYPE}}"
        -D CMAKE_CXX_FLAGS="-w"
        -D BUILD_LIB_TYPE=static
        -D RUNTIME_LIB_TYPE=MD
        -D CMAKE_OSX_ARCHITECTURES:STRING="${{ inputs.arch }}"
        ${{ env.ADDITIONAL_CMAKE_OPTIONS }}
      shell: ${{ inputs.shell_type }}

    # Unreal Engine側と Visual Studio のバージョンを合わせる必要があります。
    - name: Configure CMake for Unreal for Windows
      if: runner.os == 'Windows'
      run: >
        cmake
        -S ${{github.workspace}}
        -B ${{github.workspace}}/out/build/x64-Release-Unreal
        -G "Visual Studio ${{ inputs.visual_studio_version }}"
        -D CMAKE_INSTALL_PREFIX="C:/ninja"
        -D CMAKE_BUILD_TYPE:STRING="${{env.BUILD_TYPE}}"
        -D CMAKE_CXX_FLAGS="-w"
        -D BUILD_LIB_TYPE=static
        -D RUNTIME_LIB_TYPE=MD
        ${{ env.ADDITIONAL_CMAKE_OPTIONS }}
      shell: ${{ inputs.shell_type }}

    - name: Build by CMake for Unreal
      run: |
        cmake --build ${{github.workspace}}/out/build/x64-Release-Unreal --config ${{env.BUILD_TYPE}}
      shell: ${{ inputs.shell_type }}


    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 8.0.x


    # TODO Platform="Any CPU" としているのはあくまで仮です。
    # どの値に設定すべきか要検討です。
    - name: Build C# Wrapper
      run: dotnet build -p:Configuration=Release -p:Platform="Any CPU" ${{github.workspace}}/wrappers/csharp/LibPLATEAU.NET
      shell: ${{ inputs.shell_type }}
